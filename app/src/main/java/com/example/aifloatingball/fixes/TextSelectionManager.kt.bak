package com.example.aifloatingball.fixes

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.graphics.PixelFormat
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.webkit.WebView
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.PopupWindow
import android.widget.TextView
import android.widget.Toast
import kotlin.math.abs

/**
 * Manages text selection UI and functionality for WebViews
 */
class TextSelectionManager(
    private val context: Context,
    private val webView: WebView,
    private val windowManager: WindowManager
) {
    companion object {
        private const val TAG = "TextSelectionManager"
        private const val HANDLE_SIZE_DP = 24
        private const val HANDLE_TOUCH_RADIUS_DP = 40
        private const val MENU_AUTO_HIDE_DELAY = 5000L // 5 seconds
    }

    // Convert dp to pixels
    private val density = context.resources.displayMetrics.density
    private val handleSizePx = (HANDLE_SIZE_DP * density).toInt()
    private val handleTouchRadiusPx = (HANDLE_TOUCH_RADIUS_DP * density).toInt()

    // Selection handles views
    private var leftHandle: View? = null
    private var rightHandle: View? = null
    private var selectionMenu: View? = null
    
    // Selection data
    var selectedText: String = ""
    private var leftHandleX: Int = 0
    private var leftHandleY: Int = 0
    private var rightHandleX: Int = 0
    private var rightHandleY: Int = 0
    
    // Handle for auto-hiding menu
    private val mainHandler = Handler(Looper.getMainLooper())
    private var menuAutoHideRunnable: Runnable? = null
    
    // Handle params for both left and right handles
    private val handleParams = WindowManager.LayoutParams(
        handleSizePx,
        handleSizePx,
        WindowManager.LayoutParams.TYPE_APPLICATION_PANEL,
        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
        PixelFormat.TRANSLUCENT
    )
    
    // Menu params
    private val menuParams = WindowManager.LayoutParams(
        WindowManager.LayoutParams.WRAP_CONTENT,
        WindowManager.LayoutParams.WRAP_CONTENT,
        WindowManager.LayoutParams.TYPE_APPLICATION_PANEL,
        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
        PixelFormat.TRANSLUCENT
    )
    
    // Clipboard manager
    private val clipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
    
    init {
        // Setup handle layout params
        handleParams.gravity = Gravity.TOP or Gravity.START
        
        // Setup menu layout params
        menuParams.gravity = Gravity.TOP or Gravity.START
    }
    
    /**
     * Handle text selection from WebView
     */
    fun handleTextSelection(text: String, startX: Int, startY: Int, endX: Int, endY: Int) {
        Log.d(TAG, "Text selected: $text, Start: ($startX, $startY), End: ($endX, $endY)")
        
        if (text.isEmpty()) {
            clearSelection()
            return
        }
        
        // Store selection data
        selectedText = text
        leftHandleX = startX
        leftHandleY = startY
        rightHandleX = endX
        rightHandleY = endY
        
        // Update UI
        mainHandler.post {
            showSelectionHandles()
            showSelectionMenu()
        }
    }
    
    /**
     * Create and show selection handles
     */
    private fun showSelectionHandles() {
        // Remove existing handles if any
        removeSelectionHandles()
        
        // Create left handle
        leftHandle = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, null)
        leftHandle?.apply {
            findViewById<TextView>(android.R.id.text1)?.apply {
                text = "◆"
                gravity = Gravity.CENTER
                setBackgroundResource(android.R.drawable.ic_menu_more)
            }
            
            handleParams.x = leftHandleX - handleSizePx / 2
            handleParams.y = leftHandleY
            
            try {
                windowManager.addView(this, handleParams)
            } catch (e: Exception) {
                Log.e(TAG, "Error adding left handle: ${e.message}")
            }
        }
        
        // Create right handle
        rightHandle = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, null)
        rightHandle?.apply {
            findViewById<TextView>(android.R.id.text1)?.apply {
                text = "◆"
                gravity = Gravity.CENTER
                setBackgroundResource(android.R.drawable.ic_menu_more)
            }
            
            val params = WindowManager.LayoutParams().apply {
                copyFrom(handleParams)
                x = rightHandleX - handleSizePx / 2
                y = rightHandleY
            }
            
            try {
                windowManager.addView(this, params)
            } catch (e: Exception) {
                Log.e(TAG, "Error adding right handle: ${e.message}")
            }
        }
    }
    
    /**
     * Show the selection menu with options
     */
    private fun showSelectionMenu() {
        // Remove existing menu if any
        removeSelectionMenu()
        
        // Create menu
        selectionMenu = LinearLayout(context).apply {
            orientation = LinearLayout.HORIZONTAL
            
            // Copy button
            val copyButton = TextView(context).apply {
                text = "Copy"
                setPadding(16, 8, 16, 8)
                setOnClickListener { copySelectedText() }
            }
            
            // Share button
            val shareButton = TextView(context).apply {
                text = "Share"
                setPadding(16, 8, 16, 8)
                setOnClickListener { shareSelectedText() }
            }
            
            // Close button
            val closeButton = TextView(context).apply {
                text = "✕"
                setPadding(16, 8, 16, 8)
                setOnClickListener { clearSelection() }
            }
            
            // Add buttons to menu
            addView(copyButton)
            addView(shareButton)
            addView(closeButton)
            
            // Set background
            setBackgroundResource(android.R.drawable.dialog_holo_light_frame)
        }
        
        // Calculate menu position (center between handles, above text)
        val menuX = (leftHandleX + rightHandleX) / 2
        val menuY = Math.min(leftHandleY, rightHandleY) - 100 // 100px above the text
        
        // Set menu position
        menuParams.x = menuX
        menuParams.y = menuY
        
        // Add menu to window
        try {
            windowManager.addView(selectionMenu, menuParams)
            
            // Set timer to auto-hide menu
            scheduleMenuAutoHide()
        } catch (e: Exception) {
            Log.e(TAG, "Error adding selection menu: ${e.message}")
        }
    }
    
    /**
     * Schedule auto-hiding of the selection menu
     */
    private fun scheduleMenuAutoHide() {
        // Cancel any previous auto-hide
        menuAutoHideRunnable?.let { mainHandler.removeCallbacks(it) }
        
        // Create new auto-hide runnable
        menuAutoHideRunnable = Runnable {
            removeSelectionMenu()
        }
        
        // Schedule auto-hide
        mainHandler.postDelayed(menuAutoHideRunnable, MENU_AUTO_HIDE_DELAY)
    }
    
    /**
     * Check if a point is near any selection handle
     */
    fun isNearSelectionHandle(x: Int, y: Int): Boolean {
        if (leftHandle == null || rightHandle == null) return false
        
        val nearLeft = isPointNearHandle(x, y, leftHandleX, leftHandleY)
        val nearRight = isPointNearHandle(x, y, rightHandleX, rightHandleY)
        
        return nearLeft || nearRight
    }
    
    /**
     * Check if a point is near a specific handle
     */
    private fun isPointNearHandle(x: Int, y: Int, handleX: Int, handleY: Int): Boolean {
        val dx = abs(x - handleX)
        val dy = abs(y - handleY)
        return dx <= handleTouchRadiusPx && dy <= handleTouchRadiusPx
    }
    
    /**
     * Handle tap near selection handles
     */
    fun handleTapNearSelection(x: Int, y: Int) {
        // Reset auto-hide timer
        scheduleMenuAutoHide()
        
        // Check if tap is near selection menu and show it if hidden
        if (selectionMenu == null) {
            showSelectionMenu()
        }
    }
    
    /**
     * Copy selected text to clipboard
     */
    private fun copySelectedText() {
        if (selectedText.isNotEmpty()) {
            val clip = ClipData.newPlainText("Selected Text", selectedText)
            clipboardManager.setPrimaryClip(clip)
            Toast.makeText(context, "Text copied to clipboard", Toast.LENGTH_SHORT).show()
            
            // Hide menu after copy
            removeSelectionMenu()
        }
    }
    
    /**
     * Share selected text
     */
    private fun shareSelectedText() {
        if (selectedText.isNotEmpty()) {
            try {
                val shareIntent = android.content.Intent(android.content.Intent.ACTION_SEND).apply {
                    type = "text/plain"
                    putExtra(android.content.Intent.EXTRA_TEXT, selectedText)
                }
                context.startActivity(android.content.Intent.createChooser(shareIntent, "Share text"))
                
                // Hide menu after sharing
                clearSelection()
            } catch (e: Exception) {
                Log.e(TAG, "Error sharing text: ${e.message}")
            }
        }
    }
    
    /**
     * Get currently selected text
     */
    fun getSelectedText(): String {
        return selectedText
    }
    
    /**
     * Clear selection and remove UI elements
     */
    fun clearSelection() {
        selectedText = ""
        
        // Clear in WebView
        webView.evaluateJavascript("window.getSelection().removeAllRanges();", null)
        
        // Remove UI elements
        removeSelectionHandles()
        removeSelectionMenu()
    }
    
    /**
     * Remove selection handles from window
     */
    private fun removeSelectionHandles() {
        leftHandle?.let {
            try {
                windowManager.removeView(it)
            } catch (e: Exception) {
                Log.e(TAG, "Error removing left handle: ${e.message}")
            }
            leftHandle = null
        }
        
        rightHandle?.let {
            try {
                windowManager.removeView(it)
            } catch (e: Exception) {
                Log.e(TAG, "Error removing right handle: ${e.message}")
            }
            rightHandle = null
        }
    }
    
    /**
     * Remove selection menu from window
     */
    private fun removeSelectionMenu() {
        // Cancel auto-hide
        menuAutoHideRunnable?.let { mainHandler.removeCallbacks(it) }
        menuAutoHideRunnable = null
        
        selectionMenu?.let {
            try {
                windowManager.removeView(it)
            } catch (e: Exception) {
                Log.e(TAG, "Error removing selection menu: ${e.message}")
            }
            selectionMenu = null
        }
    }
    
    /**
     * Clean up resources
     */
    fun cleanup() {
        clearSelection()
    }

    /**
     * Show the menu
     */
    private fun showMenu() {
        // Implementation for showing UI menus
        val menuPanel = rootLayout.findViewById<View>(R.id.menu_panel)
        menuPanel?.visibility = View.VISIBLE
        
        // Schedule auto-hide
        if (menuAutoHideHandler != null) {
            menuAutoHideHandler.removeCallbacks(menuAutoHideRunnable)
            menuAutoHideHandler.postDelayed(menuAutoHideRunnable, 5000) // Hide after 5 seconds
        }
    }
    
    /**
     * Refresh the selection to keep it visible
     */
    fun refreshSelection() {
        try {
            if (selectedText.isNotEmpty()) {
                // Execute JavaScript to keep selection active
                val script = """
                    (function() {
                        if (window.getSelection().toString().trim() === '') {
                            console.log('Selection lost, attempting to restore');
                            // Try to find and re-select the text if it's been lost
                            var searchText = ${selectedText.replace("'", "\\'")}; 
                            var found = window.find(searchText, false, false, true);
                            return found ? 'restored' : 'not-found';
                        }
                        return 'already-selected';
                    })();
                """.trimIndent()
                
                webView.evaluateJavascript(script) { result ->
                    Log.d(TAG, "Selection refresh result: $result")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error refreshing selection: ${e.message}")
        }
    }
} 