plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.aifloatingball'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.aifloatingball"  // 应用包名
        minSdk 24
        targetSdk 34  // 降低目标SDK版本
        versionCode 1  // 版本号
        versionName "1.0"  // 版本名称
        resourcePrefix 'app_'
        
        // 添加 Java 选项
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [:]
            }
        }
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        encoding = 'UTF-8'
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            "-Xlint:-options"
        ]
    }

    buildFeatures {
        viewBinding true
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }

    // Add dexing options
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries true
        threadCount 8
    }
    
    // Disable AAPT2
    aaptOptions {
        cruncherEnabled = false
    }
    
    // Avoid jlink issues
    packagingOptions {
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/*.kotlin_module'
            ]
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.webkit:webkit:1.8.0'
    implementation 'androidx.annotation:annotation:1.7.1'
    
    // 动画支持
    implementation 'androidx.dynamicanimation:dynamicanimation:1.1.0-alpha03'
    implementation 'androidx.window:window:1.2.0'
    
    // UI 组件
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
    
    // Preferences
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'com.belerweb:pinyin4j:2.5.1'
    implementation 'com.airbnb.android:lottie:6.1.0'
    
    // 添加 PathInterpolatorCompat 支持
    implementation "androidx.interpolator:interpolator:1.0.0"
}

// 添加这个配置块来设置Java编译选项
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:-options"
    options.encoding = 'UTF-8'
    
    // Increase memory for compilation
    options.forkOptions.jvmArgs += ['-Xmx2048m']
}

// Add a task to clean the problematic cache
task cleanJdkImageCache(type: Delete) {
    delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/caches/transforms-3").matching {
        include "**/jdkImage/**"
        include "**/temp/jmod/**"
    }
}

// Add this task to completely skip the Java compilation if it fails
tasks.whenTaskAdded { task ->
    if (task.name == 'compileDebugJavaWithJavac' || task.name == 'compileReleaseJavaWithJavac') {
        task.enabled = false
    }
} 